#!/usr/bin/env bash
set -euo pipefail

INTERACTIVE=1 # set to 0 for unattended runs

# Colors
BOLD="\033[1m"
RESET="\033[0m"
RED="\033[31;1m"

# Print formatted header
print_header() { 
  echo -e "\n${BOLD}$1${RESET}"
}

# Confirm prompt if interactive
confirm() {
  [[ $INTERACTIVE -eq 0 ]] && return 1
  read -rp "$1 [y/N]: " ans
  [[ "$ans" =~ ^[Yy]$ ]]
}

# Update mirrors if older than 7 days
check_mirrorlist() {
  local mirrorlist="/etc/pacman.d/mirrorlist"
  if [ ! -f "$mirrorlist" ] || (( $(date +%s) - $(stat -c %Y "$mirrorlist") > 604800 )); then
    print_header "Updating mirrorlist with reflector"
    systemctl start reflector.service
    sleep 5
  fi
}

# Upgrade packages
pkg_update() {
  print_header "Upgrading Packages"
  if command -v paru &>/dev/null; then
    paru -Syu --noconfirm
  else
    sudo pacman -Syu --noconfirm
  fi
}

# Function to check for broken packages
# pacman -S rebuild-checker
rebuild() {
  print_header "Checking for broken packages"
  if command -v checkrebuild &>/dev/null; then
    if ! checkrebuild -v; then
      echo -e "Rebuild needed for above packages"
      ((INTERACTIVE)) && read -rp "Press enter to continue..."
    else
      echo "No rebuilds needed"
    fi
  fi
}

# Function to update TLDR-pages
# pacman -S tldr
tldr_cache() {
  if command -v tldr &>/dev/null; then
    print_header "Updating TLDR-pages"
    tldr --update_cache
  fi
}

# Function to check and update firmware
# pacman -S fwupd udisks2
fwupd() {
  if command -v fwupdmgr &>/dev/null; then
    print_header "Firmware check/update"
    fwupdmgr refresh
    fwupdmgr get-updates
    fwupdmgr update
  fi
}

# Function to check for CPU vulnerabilities
cpu_vulns() {
  print_header "Checking CPU vulnerabilities"
  if lscpu | grep -q 'Vulnerability:.*Vulnerable'; then
    cat << EOF

#####################
##YOU'RE VULNERABLE##
#####################

Run 'lscpu' and look at the Vulnerability section
EOF
    ((INTERACTIVE)) && read -rp "Press enter to continue..."
  else
    echo "No vulnerabilities found"
  fi
}

# Function to check for new kernel
kern_chk() {
  print_header "Checking for new Kernel"
  local current running
  current=$(pacman -Q linux | awk '{print $2}' | tr '-' '.')
  running=$(uname -r | tr '-' '.')

  if [[ "$current" == "$running" ]]; then
    echo "Latest Kernel Running - No reboot required"
  else
    echo -e "${RED}Newer kernel has been installed - Reboot required${RESET}"
    confirm "Reboot now?" && reboot || echo "Please restart when convenient"
  fi

  orphan_pkgs
}

# Function to list orphaned packages
orphan_pkgs() {
  print_header "Orphaned Packages"
  pacman -Qdt || echo "No orphaned packages"
}

# ---------------------
# Main Execution
# ---------------------
check_mirrorlist
pkg_update
rebuild
tldr_cache
fwupd
cpu_vulns
kern_chk
