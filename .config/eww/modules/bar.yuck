(defwidget app-launcher []
  (button :class "app-launcher"
    :onclick "rofi -show drun -theme ~/.config/rofi/config.rasi &"
    (label :text "󰀻")
  )
)

(defwidget workspaces []
  (eventbox :class "workspaces"
    :onscroll "$HOME/.config/eww/scripts/change-active-workspace {} \
      ${current_workspace}"
    (box :space-evenly "true"
      (label :visible "false"
        :text "${workspaces}${current_workspace}"
      )
      (for workspace in workspaces
        (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
          (box
            :class "workspace ${
              workspace.id == current_workspace ? "current" : ""
            } ${
              workspace.windows > 0 ? "occupied" : "empty"
            }"
            (label
              :text "${
                workspace.id == "1" ? "" :
                workspace.id == "2" ? "" :
                workspace.id == "3" ? "" :
                workspace.id == "4" ? "" :
                "${workspace.id}"
              }"
            )
          )
        )
      )
    )
  )
)

(defwidget window []
  (box :class "window ${window == "" ? "" : window == "null" ? "" : "occupied"}"
    (label :text "${window}")
  )
)

(defwidget bar-weather []
  (box :orientation "h"
    :space-evenly "false"
    :class "bar-weather-box"
    (label :class "bar-weather-icon"
      :style "color: ${weather_color};"
      :text weather_icon
    )
    (label
      :class "bar-weather-temp ${
        weather_temp < 32 ? 'less' :
        weather_temp < 90 ? 'normal' :
                            'more'
      }"
      :text "${weather_temp}"
    )
    (label :class "bar-weather-separator" :text "|")
    (label :class "bar-weather-text"
      :text "AQI:"
    )
    (label :class "bar-weather-aqi"
      :style "color: ${aqi_color};"
      :text "${aqi_icon}"
    )
  )
)

(defwidget control-icons [name class icon]
  (label
    :class "system-info-icon ${name}_icon ${class}"
    :text "${icon}"
  )
)

(defwidget system-info []
  (button :class "system-info"
    :onclick "${eww} update control_visible=true && \
              ${eww} open --toggle action-center-closer && \
              ${eww} open --toggle action-center"
    (box :orientation "h"
      :space-evenly "false"
      (control-icons
        :name "bluetooth"
        :class "${bluetooth-icon == "󰂲" ? "off" : "on"}"
        :icon bluetooth-icon
      )
      (control-icons
        :name "network"
        :class "${network.essid == "lo" ? "disconnected" : ""}"
        :icon "${network.essid  == "lo" ? "󰤭" :
                 network.signal == ""   ? "󰤩" :
                 network.signal <   25  ? "󰤟" :
                 network.signal <   50  ? "󰤢" :
                 network.signal <   75  ? "󰤥" :
                                          "󰤨"}"
      )
      (control-icons
        :name "volume"
        :class "${volume == "muted" ? "muted" : ""}"
        :icon "${volume == "muted" ? "󰸈" :
                 volume <   33     ? "" :
                 volume <   67     ? "" :
                                     ""}"
      )
      (control-icons
        :name "brightness"
        :class ""
        :icon brightness-icon
      )
      (control-icons
        :name "battery"
        :class "${EWW_BATTERY.BAT1.status == "Charging" ? "charging" : "discharging"} 
          ${EWW_BATTERY.BAT1.capacity < 10 ? "critical" :
            EWW_BATTERY.BAT1.capacity < 20 ? "low"      : ""}"
        :icon "${EWW_BATTERY.BAT1.status == "Charging" ? "" :
                 EWW_BATTERY.BAT1.capacity > 90 ? "" :
                 EWW_BATTERY.BAT1.capacity > 75 ? "" :
                 EWW_BATTERY.BAT1.capacity > 50 ? "" :
                 EWW_BATTERY.BAT1.capacity > 25 ? "" :
                                                  ""}"
      )
    )
  )
)

(defwidget clock []
  (box :class "clock-text"
    (label :text {formattime(EWW_TIME, "%I:%M%p")})
  )
)

(defwidget power-button []
  (button :class "bar-power-button"
    :onclick "${eww} open --toggle powermenu-closer && \
              ${eww} open --toggle powermenu"
    (label :text "⏻")
  )
)

(defwidget left-modules []
  (box :class "left-modules"
    :orientation "h"
    :space-evenly "false"
    :halign "start"
    (app-launcher)
    (workspaces)
  )
)

(defwidget middle-modules []
  (box :class "middle-modules"
    :orientation "h"
    :space-evenly "false"
    :halign "center"
    (window)
  )
)

(defwidget right-modules []
  (box :class "right-modules"
    :orientation "h"
    :space-evenly "false"
    :halign "end"
    (eventbox :class "bar-weather-info"
      :onhover "${eww} open weather && \
        ${eww} update weather_visible=true"
      :onhoverlost "${eww} close weather && \
        ${eww} update weather_visible=false"
      (bar-weather)
    )
    (system-info)
    (eventbox :class "clock"
      :onhover "${eww} open cal-info"
      :onhoverlost "${eww} close cal-info"
      (clock)
    )
    (power-button)
  )
)

(defwidget bar []
  (box :class "eww-bar"
    :orientation "h"
    :space-evenly "true"
    (left-modules)
    (middle-modules)
    (right-modules)
  )
)

(defwindow bar
  :monitor 0
  :geometry (geometry
    :width "150%"
    :anchor "top center")
  :stacking "fg"
  :exclusive "true"
  :focusable "false"
  (bar)
)
