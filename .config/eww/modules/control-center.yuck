(defwidget action-info []
  (box :class "action-info"
    :orientation "h"
    :space-evenly "false"
    (box :orientation "h"
      :halign "start"
      (label
        :class "battery-info ${
          EWW_BATTERY.BAT1.status == "Charging" ? "charging" : "discharging"
        }"
        :halign "start"
        :text {
          EWW_BATTERY.BAT1.status == "Charging"
                                         ? "󰂄 ${EWW_BATTERY.BAT1.capacity}" : 
          EWW_BATTERY.BAT1.capacity > 95 ? "󰁹 ${EWW_BATTERY.BAT1.capacity}" :
          EWW_BATTERY.BAT1.capacity > 90 ? "󰂂 ${EWW_BATTERY.BAT1.capacity}" :
          EWW_BATTERY.BAT1.capacity > 80 ? "󰂁 ${EWW_BATTERY.BAT1.capacity}" :
          EWW_BATTERY.BAT1.capacity > 70 ? "󰂀 ${EWW_BATTERY.BAT1.capacity}" :
          EWW_BATTERY.BAT1.capacity > 60 ? "󰁿 ${EWW_BATTERY.BAT1.capacity}" :
          EWW_BATTERY.BAT1.capacity > 50 ? "󰁾 ${EWW_BATTERY.BAT1.capacity}" :
          EWW_BATTERY.BAT1.capacity > 40 ? "󰁽 ${EWW_BATTERY.BAT1.capacity}" :
          EWW_BATTERY.BAT1.capacity > 30 ? "󰁼 ${EWW_BATTERY.BAT1.capacity}" :
          EWW_BATTERY.BAT1.capacity > 20 ? "󰁻 ${EWW_BATTERY.BAT1.capacity}" :
          EWW_BATTERY.BAT1.capacity > 10 ? "󰁺 ${EWW_BATTERY.BAT1.capacity}" :
                                           "󰂎 ${EWW_BATTERY.BAT1.capacity}"
        }
      )
    )
    (box :orientation "h"
      :space-evenly "false"
      :halign "end"
      :hexpand "true"
      (box :orientation "h"
        :space-evenly "false"
        :halign "end"
        (label :class "user-clock-time"
          :text {formattime(EWW_TIME, "%I:%M %p")}
        )
        (label :class "user-clock-separator" :text "|")
        (label :class "user-clock-date"
          :text {formattime(EWW_TIME, "%a, %b %d")}
        )
      )
    )
  )
)

(defwidget action-settings []
  (box :orientation "v"
    :class "action_settings_box"
    :space-evenly "true"
    (box :orientation "h"
      :space-evenly "true"
      (bluetooth)
      (network)
    )
    (box :orientation "h"
      :space-evenly "true"
      (airplane)
      (vpn)
    )
  )
)

(defwidget action_settings_button [condition action icon label class]
  (button :onclick {action} 
    :class {
      condition ? "action_settings_button ${class}" :
      "action_settings_button action_settings_button_toggled ${class}"
    }
    (box :orientation "h"
      :space-evenly "false"
      (box :orientation "h"
        :space-evenly "false"
        :halign "start"
        (label :class "action-settings-icon"
          :text {icon}
        )
      )
      (box :orientation "v"
        :class "action-settings-info"
        :space-evenly "false"
        :halign "end"
        :valign "center"
        (box :orientation "h"
          :space-evenly "false"
          :halign "start"
          (label :class "action-settings-text"
            :text {label}
          )
        )
        (box :orientation "h"
          :space-evenly "false"
          :halign "start"
          (label
            :class {
              condition ? "action-settings-state" :
              "action-settings-state action-settings-state-enabled"
            } 
            :text {condition ? "Off" : "On"}
          )
        )
      )
    )
  )
)

(defwidget bluetooth []
  (action_settings_button :condition {bluetooth-icon == "󰂲"}
    :action "blueman-manager &"
    :icon bluetooth-icon
    :label "Bluetooth"
    :class "left-top-plite"
  )
)

(defwidget network []
  (action_settings_button :condition {network.essid == "lo"}
    :action {
      network.essid == "lo" ? "nm-connection-editor &" :
      "nmcli connection down id '${network.essid}'"
    }
    :icon {
      network.essid == "lo" ? "󰤭" :
      network.signal == ""  ? "󰤩" :
      network.signal < 25   ? "󰤟" :
      network.signal < 50   ? "󰤢" :
      network.signal < 75   ? "󰤥" :
                              "󰤨"
    }
    :label {network.essid == "lo" ? "Not connected" : network.essid}
    :class "right-top-plite"
  )
)

(defwidget airplane []
  (action_settings_button :condition {airplane == "unblocked"}
    :action "rfkill toggle all"
    :icon {
      airplane == "unblocked" ? "󰀞" :
      airplane == "blocked"   ? "󰀝" :
                                "󱡺"
    }
    :label "Airplane Mode"
    :class "left-bottom-plite"
  )
)

(defwidget vpn []
  (action_settings_button :condition {vpn_status == "null"}
    :action "nm-connection-editor &"
    :icon "${
      vpn_status == "null" ? "󰖂" : "󰌆"
    }"
    :label "VPN"
    :class "right-bottom-plite"
  )
)

(defwidget brightness_scale []
  (overlay :hexpand "true"
    (scale :min 0 :max 100
      :round-digits 0
      :active "true"
      :value brightness
      :onchange "xbacklight -set {}"
      :class "brightness-scale"
    )
    (label :class 'brightness-icon ${brightness < 5 ? "less" : "more"}'
      :halign "start"
      :text "󰳲"
    )
  )
)

(defwidget brightness_control_center []
  (box :orientation "h"
    :class "brightness-control-center"
    :space-evenly "false"
    (brightness_scale)
    (button :class "brightness-button"
      :onclick brightness-toggle brightness-icon
    )
  )
)

(defwidget volume_scale []
  (overlay :hexpand "true"
    (scale :min 0 :max 100 
      :round-digits 0
      :active {volume != "muted"}
      :value {volume == "muted" ? 0 : volume}
      :onchange "pamixer --set-volume {}"
      :class "volume-scale"
    )
    (label
      :class 'volume-icon ${
        volume == "muted" ? "less" :
        volume < 5 ? "less" : "more"
      }'
      :halign "start"
      :text "󰎇"
    )
  )
)

(defwidget volume_control_center []
  (box :orientation "h"
    :class "volume-control-center"
    :space-evenly "false"
    (volume_scale)
    (button :class "volume-button ${volume == 'muted' ? 'active' : ''}"
      :onclick "pamixer -t" '${
        volume == "muted" ? "󰝟" :
        volume < 33 ? "" :
        volume < 67 ? "" :
                      "󰕾"
      }'
    )
  )
)

(defwidget action-center []
  (box :class "action_center"
    :orientation "v"
    :space-evenly "false"
    (action-info)
    (action-settings)
    (brightness_control_center)
    (volume_control_center)
  )
)

(defwindow action-center
  :monitor 0
  :geometry (geometry
    :x "2px"
    :y "2px"
    :width "400px"
    :anchor "top right")
  :stacking "overlay"
  :exclusive "false"
  :focusable "false"
  (action-center)
)

(defwindow action-center-closer
  :monitor 0
  :geometry (geometry
    :width "150%"
    :height "150%")
  :stacking "fg"
  :exclusive "false"
  :focusable "false"
  (closer :window "action-center")
)
